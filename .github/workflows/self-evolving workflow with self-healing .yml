name: Self-Evolving Workflow with Self-Healing

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: pip install -r requirements.txt 

      - name: Run tests and capture logs
        run: |
          pytest --junitxml=report.xml | tee log_file.txt

  collect_metrics:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.build_and_test.result == 'success' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Dependencies  
        run: pip install -r requirements.txt
      - name: Gather Test Coverage
        run: |
          coverage run -m pytest
          coverage report -m
          coverage xml -o code-coverage.xml 

      - name: Gather Build Time Metrics
        run: |
          echo "build_time=$(python -c 'import xml.etree.ElementTree as ET; tree = ET.parse(\"report.xml\"); root = tree.getroot(); print(sum(float(testcase.attrib[\"time\"]) for testcase in root.iter(\"testcase\")))' )" >> $GITHUB_ENV

  analyze_and_decide:
    runs-on: ubuntu-latest
    needs: collect_metrics
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.collect_metrics.result == 'success' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Dependencies (if needed)
        if: hashFiles('requirements.txt') != ''
        run: pip install -r requirements.txt

      - name: Analyze Metrics
        id: analyze_metrics
        run: |
          python -c '
          import xml.etree.ElementTree as ET
          import os

          tree = ET.parse("code-coverage.xml")
          root = tree.getroot()
          percent_covered = float(root.attrib["line-rate"]) * 100

          threshold = ${{ env.TEST_COVERAGE_THRESHOLD }} 

          should_update = percent_covered < threshold

          update_details = f"Test coverage is below {threshold}% - consider adding more tests." if should_update else "Test coverage meets the required threshold."

          with open(os.environ["GITHUB_ENV"], "a") as fh:
              fh.write(f"should_update={str(should_update).lower()}\n")
              if should_update:
                  fh.write(f"update_details={update_details}\n")
          '

      - name: Create Pull Request with Workflow Changes
        if: steps.analyze_metrics.outputs.should_update == 'true'
        uses: peter-evans/create-pull-request@v4
        with:
          title: "Proposed Workflow Improvements"
          body: ${{ steps.analyze_metrics.outputs.update_details }}
          branch: proposed-workflow-changes
          commit-message: "Update workflow based on analysis"
          path: .github/workflows/evolving_with_self_healing.yml
          labels: workflow-update

  self_heal:
    runs-on: ubuntu-latest
    needs: [build_and_test, collect_metrics, analyze_and_decide]
    if: ${{ github.event.workflow_run.conclusion == 'failure' && (needs.build_and_test.result == 'failure' || needs.collect_metrics.result == 'failure') }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies  
        run: pip install -r requirements.txt 

      - name: Analyze Failure and Recover
        id: analyze_failure_and_recover
        run: |
          # Analyze the failure by parsing logs
          import os
          import re
          
          retryable = False
          cause = ""
          
          log_file = os.path.join(os.environ['GITHUB_WORKSPACE'], 'log_file.txt')
          
          with open(log_file, 'r') as f:
              logs = f.readlines()
          
          error_patterns = {
              'failed_test': r"AssertionError",
              'bad_commit': r"SyntaxError",
              'network_issue': r"ConnectionError"
          }
          
          for line in logs:
              for error_type, pattern in error_patterns.items():
                  if re.search(pattern, line):
                      if error_type == 'network_issue':
                          retryable = True
                      else:
                          cause = error_type
                      break
              if cause or retryable:
                  break
          
          with open(os.environ['GITHUB_ENV'], 'a') as fh:
              fh.write(f'retryable={str(retryable).lower()}\n')
              fh.write(f'cause={cause}\n')

      - name: Retry Failed Job
        if: ${{ steps.analyze_failure_and_recover.outputs.retryable == 'true' }}
        uses: nick-invision/retry@v2
        with:
          max_attempts: 3
          timeout-minutes: 10

      - name: Rollback Commit
        if: ${{ steps.analyze_failure_and_recover.outputs.cause == 'bad_commit' }}
        run: |
          git revert HEAD~1 
          git push origin main

